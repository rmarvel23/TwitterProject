# -*- coding: utf-8 -*-
"""Limpito.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18W3lfu8YDwqcnpZ7BlqrkHAlc7f1fXoY
"""

import chardet
import pandas as pd

def detectar_encoding(archivo_csv):
    with open(archivo_csv, 'rb') as f:
        resultado = chardet.detect(f.read())
    return resultado['encoding']

detectar_encoding("/content/train.csv")

def read_csv(csv, encoding):
    df = pd.read_csv(csv, encoding=encoding, sep= ",", on_bad_lines='skip')
    return df

df = read_csv('/content/train.csv','Windows-1252' )

class DataError(Exception):
    pass

class DataReviewer:

    def __init__(self,df):
      self.df = df
      self.data_cleaner = DataCleaner(df)

    def show_sample(self, n=5):
      try:
            return self.df.sample(n)
      except Exception as e:
            raise DataError(f"Error showing sample: {e}")

    def get_info(self):
        try:
            return self.df.info()
        except Exception as e:
            raise DataError(f"Error showing sample: {e}")

    def describe(self):
        try:
            return self.df.describe()
        except Exception as e:
            raise DataError(f"Error showing sample: {e}")

    def get_columns(self):
        try:
            return self.df.columns
        except Exception as e:
            raise DataError(f"Error showing sample: {e}")

    def count_rows(self, column):
        try:
            if column in self.df.columns:
                return self.df[column].count()
            else:
                raise DataError(f"Column '{column}' not found in dataset.")
        except Exception as e:
            raise DataError(f"Error counting rows: {e}")

    def get_unique(self,column):
        try:
            if column in self.df.columns:
                return self.df[column].unique()
            else:
                raise DataError(f"Column '{column}' not found in dataset.")
        except Exception as e:
            raise DataError(f"Error getting unique values: {e}")

    def check_nulls(self):
        try:
            return self.df.isnull().any()
        except Exception as e:
            raise DataError(f"Error checking nulls: {e}")

    def get_percentage_nulls(self):
        try:
            return self.df.isnull().sum() / len(self.df) * 100
        except Exception as e:
            raise DataError(f"Error checking nulls: {e}")

    def get_dtypes(self):
        try:
            return self.df.dtypes
        except Exception as e:
            raise DataError(f"Error checking nulls: {e}")

    def shape(self):
        try:
            return self.df.shape
        except Exception as e:
            raise DataError(f"Error getting shape: {e}")

    def count_unique(self, column):
        try:
            if column in self.df.columns:
                return self.df[column].nunique()
            else:
                raise DataError(f"Column '{column}' not found in dataset.")
        except Exception as e:
            raise DataError(f"Error counting unique values: {e}")

class DataCleaner:
    def __init__(self, df):
        self.df = df

    def drop_unnecessary_col(self):
        unnecessary_columns = ['textID', 'selected_text', 'Population -2020', 'Land Area (Km²)', 'Density (P/Km²);;;;;;;;;;;;']
        try:
            self.df = self.df.drop(columns=unnecessary_columns, errors='ignore')
            return self.df
        except KeyError as e:
            raise DataError(f"Error dropping columns: {e}")

    def remove_nulls(self):
        columns_to_check = ["sentiment", "Time of Tweet", "Age of User", "Country", "text"]
        try:
            self.df = self.df.dropna(subset=columns_to_check)
            return self.df
        except KeyError as e:
            raise DataError(f"Error dropping nulls: {e}")

    def rename_col(self):
        try:
            self.df = self.df.rename(columns={"Time of Tweet": "Time", "Age of User": "Age"})
            return self.df
        except KeyError as e:
            raise DataError(f"Error renaming columns: {e}")

cleaned = DataCleaner(df)

df = cleaned.drop_unnecessary_col()

df = cleaned.remove_nulls()

df = cleaned.rename_col()

df.isnull().sum()

df

class WrongDataRemover():
    def __init__(self, df):
        self.df = df
    def remove_wrong_age(self):
        valid_ranges = ["0-20", "21-30", "31-45", "46-60", "60-70", "70-100"]
        self.df = self.df[self.df['Age'].isin(valid_ranges)]
        return self.df
    def remove_wrong_time(self):
        valid_data = ["noon", "night", "morning"]
        self.df = self.df[self.df['Time'].isin(valid_data)]
        return self.df
    def remove_wrong_countries(self):
        valid_data = ['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',
       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',
       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',
       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',
       'Burkina Faso', 'Burundi', "Côte d'Ivoire", 'Cabo Verde',
       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',
       'China', 'Comoros', 'Croatia', 'Cuba', 'Czechia (Czech Republic)',
       'Democratic Republic of the Congo', 'Denmark', 'Djibouti',
       'Dominican Republic', 'Ecuador', 'El Salvador',
       'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji',
       'Finland', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',
       'Greece', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guyana',
       'Honduras', 'Hungary', 'India', 'Indonesia', 'Iraq', 'Ireland',
       'Israel', 'Italy', 'Japan', 'Jordan', 'Kenya', 'Kiribati',
       'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho',
       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malaysia',
       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',
       'Mexico', 'Micronesia', 'Monaco', 'Montenegro', 'Morocco',
       'Mozambique', 'Myanmar (formerly Burma)', 'Nepal', 'Nicaragua',
       'Niger', 'North Korea', 'North Macedonia', 'Norway', 'Pakistan',
       'Palau', 'Palestine State', 'Panama', 'Papua New Guinea',
       'Paraguay', 'Philippines', 'Portugal', 'Rwanda', 'Saint Lucia',
       'Saint Vincent and the Grenadines', 'Samoa',
       'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',
       'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Somalia',
       'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan',
       'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan',
       'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga',
       'Trinidad and Tobago', 'Tunisia', 'Turkmenistan', 'Tuvalu',
       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',
       'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu',
       'Venezuela', 'Yemen', 'Zambia', 'Zimbabwe', 'Afghanistan',
       'Angola', 'Azerbaijan', 'Belgium', 'Belize', 'Bolivia', 'Bulgaria',
       'Chad', 'Chile', 'Costa Rica', 'Cyprus', 'Dominica', 'Egypt',
       'France', 'Haiti', 'Iceland', 'Jamaica', 'Madagascar', 'Malawi',
       'Namibia', 'Nauru', 'Netherlands', 'New Zealand', 'Nigeria',
       'Oman', 'Poland', 'Qatar', 'Russia', 'Saint Kitts and Nevis',
       'San Marino', 'Slovakia', 'Solomon Islands', 'South Africa',
       'Turkey', 'Vietnam', 'Belarus', 'Colombia',
       'Congo (Congo-Brazzaville)', 'Guinea', 'Holy See', 'Kazakhstan',
       'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran', 'Mauritius', 'Liberia', 'Eswatini (fmr. """"Swaziland"""")""']
        self.df = self.df[self.df['Country'].isin(valid_data)]
        return self.df

    def change_country_names(self):
        replace_dict = {"Czechia (Czech Republic)" : "Czechia",
                        "Democratic Republic of the Congo": "R.D. Congo",
                        "Myanmar (formerly Burma)": "Myanmar",
                        "Congo (Congo-Brazzaville)" : "Congo-Brazzaville",
                        'Eswatini (fmr. """"Swaziland"""")""' : "Eswatini"


        }
        self.df['Country'] = df['Country'].replace(replace_dict)
        return df

    def remove_wrong_sentiment(self):
        valid_sentiment = ["positive", "negative", "neutral"]
        self.df = self.df[self.df['sentiment'].isin(valid_sentiment)]
        return self.df

remover = WrongDataRemover(df)



remover1 = WrongDataRemover(df)

df = remover.remove_wrong_age()

df = remover.remove_wrong_countries()

df = remover.remove_wrong_sentiment()

df = remover.remove_wrong_time()

df = remover.change_country_names()

df['Country'].unique()

df.info()

from abc import ABC, abstractmethod
import matplotlib.pyplot as plt

class DataVisualizer(ABC):
    def __init__(self, df):
        self.df = df

    @abstractmethod
    def get_positive(self):
        pass

    @abstractmethod
    def get_negative(self):
        pass

    @abstractmethod
    def get_sentiment(self):
        pass


class CountryAnalyzer(DataVisualizer):

    available_countries = ['Albania', 'Algeria', 'Andorra', 'Antigua and Barbuda',
       'Argentina', 'Armenia', 'Australia', 'Austria', 'Bahamas',
       'Bahrain', 'Bangladesh', 'Barbados', 'Benin', 'Bhutan',
       'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei',
       'Burkina Faso', 'Burundi', "Côte d'Ivoire", 'Cabo Verde',
       'Cambodia', 'Cameroon', 'Canada', 'Central African Republic',
       'China', 'Comoros', 'Croatia', 'Cuba', 'Denmark', 'Djibouti',
       'Dominican Republic', 'Ecuador', 'El Salvador',
       'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji',
       'Finland', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',
       'Greece', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guyana',
       'Honduras', 'Hungary', 'India', 'Indonesia', 'Iraq', 'Ireland',
       'Israel', 'Italy', 'Japan', 'Jordan', 'Kenya', 'Kiribati',
       'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho',
       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malaysia',
       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',
       'Mexico', 'Micronesia', 'Monaco', 'Montenegro', 'Morocco',
       'Mozambique', 'Nepal', 'Nicaragua', 'Niger', 'North Korea',
       'North Macedonia', 'Norway', 'Pakistan', 'Palau',
       'Palestine State', 'Panama', 'Papua New Guinea', 'Paraguay',
       'Philippines', 'Portugal', 'Rwanda', 'Saint Lucia',
       'Saint Vincent and the Grenadines', 'Samoa',
       'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia',
       'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Somalia',
       'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan',
       'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan',
       'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga',
       'Trinidad and Tobago', 'Tunisia', 'Turkmenistan', 'Tuvalu',
       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',
       'United States of America', 'Uruguay', 'Uzbekistan', 'Vanuatu',
       'Venezuela', 'Yemen', 'Zambia', 'Zimbabwe', 'Afghanistan',
       'Angola', 'Azerbaijan', 'Belgium', 'Belize', 'Bolivia', 'Bulgaria',
       'Chad', 'Chile', 'Costa Rica', 'Cyprus', 'Dominica', 'Egypt',
       'France', 'Haiti', 'Iceland', 'Jamaica', 'Madagascar', 'Malawi',
       'Namibia', 'Nauru', 'Netherlands', 'New Zealand', 'Nigeria',
       'Oman', 'Poland', 'Qatar', 'Russia', 'Saint Kitts and Nevis',
       'San Marino', 'Slovakia', 'Solomon Islands', 'South Africa',
       'Turkey', 'Vietnam', 'Belarus', 'Colombia', 'Guinea', 'Holy See',
       'Kazakhstan', 'Moldova', 'Mongolia', 'Peru', 'Romania', 'Iran',
       'Mauritius', 'Liberia', 'Eswatini']

    def __init__(self, df, country):
        super().__init__(df)

        while country not in self.available_countries:
            country = input(f"Country not available. The available list is: {self.available_countries}, please try again: ")

        self.country = country

    def get_positive(self):
        try:
            return self.df[(self.df['Country'] == self.country) & (self.df['sentiment'] == "positive")].shape[0]
        except Exception as e:
            print(f"Error getting positive sentiment for {self.country}: {e}")

    def get_negative(self):
        try:
            return self.df[(self.df['Country'] == self.country) & (self.df['sentiment'] == "negative")].shape[0]
        except Exception as e:
            print(f"Error getting negative sentiment for {self.country}: {e}")

    def get_sentiment(self):
        try:
            sentiment_counts = self.df[self.df['Country'] == self.country].groupby('sentiment').size()
            plt.figure(figsize=(8,8))
            plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)
            plt.title(f'Tweets by people from {self.country}')
            plt.axis('equal')
            plt.show()
        except Exception as e:
            print(f"Error plotting sentiment for {self.country}: {e}")

    def compare_sentiment(self, sentiment="negative"):
        try:
            tweets_by_country = self.df[self.df['sentiment'] == sentiment]['Country'].value_counts()
            top_countries = tweets_by_country.head(20).sort_values(ascending=False)
            plt.figure(figsize=(10, 8))

            colors = plt.cm.tab20(range(len(top_countries)))

            bars = plt.bar(top_countries.index, top_countries.values, color=colors)
            plt.title(f'Top 20 counstries with {sentiment} tweets ')
            plt.xticks(rotation=45, ha='right', fontsize=7)

            plt.show()
        except KeyError as e:
            print(f"KeyError: {e}. Make sure 'sentiment' and 'Country' columns exist in the DataFrame.")
        except Exception as e:
            print(f"Error comparing sentiment: {e}")

class AgeAnalyzer(DataVisualizer):
    available_ages = ['21-30', '31-45', '46-60', '70-100', '0-20', '60-70']

    def __init__(self, df, age):
        super().__init__(df)
        while age not in self.available_ages:
            age = input(f"Age range not available. Ages availables are {self.available_ages}. Try again.")
        self.age = age

    def get_positive(self):
        try:
            return self.df[(self.df['Age'] == self.age) & (self.df['sentiment'] == "positive")].shape[0]
        except Exception as e:
            print(f"Error getting positive sentiment for {self.age} years old: {e}")

    def get_negative(self):
        try:
            return self.df[(self.df['Age'] == self.age) & (self.df['sentiment'] == "negative")].shape[0]
        except Exception as e:
            print(f"Error getting negative sentiment for {self.age} years old: {e}")

    def get_sentiment(self):
        try:
            sentiment_counts = self.df[self.df['Age'] == self.age].groupby('sentiment').size()
            plt.figure(figsize=(8,8))
            plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)
            plt.title(f'Tweets by people of {self.age} years old')
            plt.axis('equal')
            plt.show()
        except Exception as e:
            print(f"Error plotting sentiment for {self.age} years old: {e}")

    def compare_sentiment(self, sentiment="negative"):
        try:
            tweets_by_age = self.df[self.df['sentiment'] == sentiment]['Age'].value_counts()
            top_ages = tweets_by_age.head(20).sort_values(ascending=False)
            plt.figure(figsize=(10, 8))

            colors = plt.cm.tab20(range(len(top_ages)))

            bars = plt.bar(top_ages.index, top_ages.values, color=colors)
            plt.title(f'{sentiment} tweets in age ranges ')
            plt.xticks(rotation=45, ha='right', fontsize=7)

            plt.show()
        except KeyError as e:
            print(f"KeyError: {e}. Make sure 'sentiment' and 'Age' columns exist in the DataFrame.")
        except Exception as e:
            print(f"Error comparing sentiment: {e}")

    def plot_age_vs_sentiment(self):
        try:
            sentiment_mapping = {'positive': 1, 'neutral': 0, 'negative': -1}
            self.df['sentiment_score'] = self.df['sentiment'].map(sentiment_mapping)
            plt.scatter(self.df['Age'], self.df['sentiment_score'], alpha=0.5)
            plt.title('Age vs Sentiment')
            plt.xlabel('Age')
            plt.ylabel('Sentiment Score')
            plt.show()

        except Exception as e:
            print(f"Error plotting age vs sentiment: {e}")

class TimeAnalyzer(DataVisualizer):
    available_times =  ['noon', 'night', 'morning']

    def __init__(self, df, time):
        super().__init__(df)
        while time not in self.available_times:
            time = input(f"Time of tweet not available. Times availables are {self.available_times}. Try again.")
        self.time = time

    def get_positive(self):
        try:
            return self.df[(self.df['Time'] == self.time) & (self.df['sentiment'] == "positive")].shape[0]
        except Exception as e:
            print(f"Error getting positive sentiment for {self.time}: {e}")

    def get_negative(self):
        try:
            return self.df[(self.df['Time'] == self.time) & (self.df['sentiment'] == "negative")].shape[0]
        except Exception as e:
            print(f"Error getting negative sentiment for {self.time}: {e}")

    def get_sentiment(self):
        try:
            sentiment_counts = self.df[self.df['Time'] == self.age].groupby('sentiment').size()
            plt.figure(figsize=(8,8))
            plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)
            plt.title(f'Tweets by people in {self.age}')
            plt.axis('equal')
            plt.show()
        except Exception as e:
            print(f"Error plotting sentiment for {self.time}: {e}")

    def compare_sentiment(self, sentiment="negative"):
        try:
            tweets_by_time = self.df[self.df['sentiment'] == sentiment]['Time'].value_counts()
            top_times = tweets_by_time.sort_values(ascending=False)
            plt.figure(figsize=(10, 8))

            colors = plt.cm.tab20(range(len(top_times)))
            bars = plt.bar(top_times.index, top_times.values, color=colors)
            plt.title(f'{sentiment} tweets in different times ')
            plt.xticks(rotation=45, ha='right', fontsize=7)

            plt.show()
        except KeyError as e:
            print(f"KeyError: {e}. Make sure 'sentiment' and 'Time' columns exist in the DataFrame.")
        except Exception as e:
            print(f"Error comparing sentiment: {e}")

class LengthAnalyzer(DataVisualizer):

    def __init__(self, df):
        super().__init__(df)

    def get_positive(self):
        try:
            positive_tweets = self.df[self.df['sentiment'] == "positive"]
            positive_lenght = positive_tweets['text'].apply(len)
            mean_lenght = positive_lenght.mean()
            return mean_length
        except Exception as e:
            print(f"Error calculating mean length of positive tweets: {e}")
            return None

    def get_negative(self):
        try:
            negative_tweets = self.df[self.df['sentiment'] == "negative"]
            negative_lenght = negative_tweets['text'].apply(len)
            mean_lenght = negative_lenght.mean()
            return mean_length
        except Exception as e:
            print(f"Error calculating mean length of negative tweets: {e}")
            return None

    def get_sentiment(self):
        try:
            sentiments = ["positive", "negative", "neutral"]
            mean_lenghts = []

            for sentiment in sentiments:
                tweet_lenghts = self.df[self.df['sentiment'] == sentiment]["text"].apply(len)
                mean_lenght = tweet_lenghts.mean()
                mean_lenghts.append(mean_lenght)

            plt.figure(figsize=(10, 6))
            plt.bar(sentiments, mean_lengths, color=['green', 'red', 'blue'])
            plt.xlabel('Sentiment')
            plt.ylabel('Average Tweet Length')
            plt.title('Average Tweet Length by Sentiment')
            plt.show()
        except Exception as e:
            print(f"Error plotting tweet length by sentiment: {e}")

country = CountryAnalyzer(df, "France")

age = AgeAnalyzer(df, "21-30")

time = TimeAnalyzer(df, "noon")

time.compare_sentiment()

#PREGUNTAR QUÉ HACER CON ESTO
data = {'text': ["I love this new CD, it is awesome.",
 "I hate this fucking city, it is so noisy, help",
 "Adorable!!!! Just bought it and I couldn't be happier",
 "This stupid guy just hit me in front of my friends, so embarrassed",
 "Incredible. It's been a great concert. Awesome!!!"],
        'sentiment' : ["positive", "negative", "positive", "negative", "positive"]}
df2 = pd.DataFrame(data)